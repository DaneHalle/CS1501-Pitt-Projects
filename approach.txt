============================================
CS/COE 1501 Assignment user_history Approach
--------------------------------------------
When thinking of of how to store user's history, I first nailed down writing to a file and would just append every chosen word to the file if it existed, or create the file and then append from there. I then attempted to search through the file with .startWith() but ran into issues. I then started thinking about storing the history somehow and then writing it to the file after. The first approach I thought about was ArrayList but I figured it would be more difficult and a lot more work. I also realized that should the user's history be very long, it could cause issues with speed and memory. So sitting down thinking I realized I already had the best approach to store the history before putting the history in the file. A DLB. So I adapted my code to work with not just a dictionary but also a user_history and there are two DLB's in the background. Any time the user choses a word, it is added to the user_history DLB. Then predictions are made from the user_history DLB as well as the dictionary DLB and then compares the two to make sure there are no words said twice. As for the writing to the file, I used the same code I used to make predictions to get strings from the user_history DLB and then append them to the user_hisotry.txt file. 
For frequency I stored the value inside the terminator character in the DLB. I then used a Priority Queue from the PriorityQueue class in java. I let the class do the work of sorting and then compare the output array of strings to the dictionary predictions to make sure there are no duplicates. 